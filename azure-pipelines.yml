# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - master

# pool:
#   vmImage: ubuntu-latest

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'



trigger:
- main

stages:
# ========== Stage 1: Build & Push Docker Image ==========
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildJob
    pool:
      name: Azure Pipelines
      demands: maven
    steps:
    - checkout: none
    # - task: Maven@3
    #   displayName: 'Build with Maven'

    # - task: CopyFiles@2
    #   displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    #   inputs:
    #     SourceFolder: '$(system.defaultworkingdirectory)'
    #     Contents: '**/*.jar'
    #     TargetFolder: '$(build.artifactstagingdirectory)'

    
    # 获取 ACR Token 并 docker login
    - task: Bash@3
      displayName: "Login to Aliyun ACR"
      inputs:
        targetType: inline
        script: |
          curl -sS https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz -o aliyun-cli.tgz
          tar -xvf aliyun-cli.tgz >/dev/null
          sudo mv aliyun /usr/local/bin/

          # 用非交互模式配置
          aliyun configure set \
            --mode AK \
            --access-key-id $(ALIYUN_ACCESS_KEY_ID) \
            --access-key-secret $(ALIYUN_ACCESS_KEY_SECRET) \
            --region cn-hangzhou

          AUTH_TOKEN=$(aliyun cr GetAuthorizationToken --InstanceId cri-qwmdiuukfsngpi5h --region cn-hangzhou | jq -r '.AuthorizationToken')
          echo AUTH_TOKEN $AUTH_TOKEN
          echo "$AUTH_TOKEN" | docker login --username=AliyunReservedSSO-Administrator/ezl1wx@bosch.com@1262255223177621 acr-rbhpoc-prod-hz-registry.cn-hangzhou.cr.aliyuncs.com --password-stdin
          echo "login success"


#     - task: Docker@2
#       displayName: 'Build and Push Docker Image'
#       inputs:
#         containerRegistry: 'dockerhub-test'
#         repository: 'raypick/rbhpoc-qmm-backend'
#         Dockerfile: '**/Dockerfile-prod'
#         tags: |
#           $(Build.BuildId)

# # ========== Stage 2: deploy image to SelfHosted Agent ==========
# - stage: Deploy
#   displayName: 'Deploy to ECS Agent'
#   dependsOn: Build
#   jobs:
#   - job: DeployJob
#     pool:
#       name: ecs-agent-pool-rbhpoc-ali-prod
#       demands:
#         - agent.name -equals ecs-rbhpoc-eol-test-hz
#     steps:
#     - checkout: none

#     - script: |
#         docker stop getsign || true
#         docker rm getsign || true
#         docker run -d --name getsign raypick/rbhpoc-qmm-backend:$(Build.BuildId)
#       displayName: 'Run latest docker container'

